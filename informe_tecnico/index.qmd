---
format:
  html:
    toc: true
    toc-depth: 2
    number-sections: true
execute:
  echo: false
   
---



```{=html}

<style>
    h2 {
        border: none !important;
        box-shadow: none !important;
        border-bottom: none !important;
    }
</style>
<div style="
    background-color:rgb(255, 255, 255);
    border-radius: 15px;
    padding: 30px;
    text-align: center;
    font-family: Arial, sans-serif;
    color: #333;
    box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);">
    <h1 style="color:rgb(26, 54, 97); font-size: 50px;">Trabajo 3: aplicaciones en sistemas de recomendación e imágenes</h1>
    <h2 style="color: #555;">Redes Neuronales y Algoritmos Bioinspirados</h2>

    <h3 style="color: #222; margin: 10px 0;">Equipo:</h3>
    <ul style="list-style: none; padding: 0; font-size: 20px;">
        <li>Juan José Correa Hurtado</li>
        <li>Jacobo Ochoa Ramírez</li>
    </ul>
    <h3 style="color: #222; margin: 10px 0;">Profesor:</h3>
    <ul style="list-style: none; padding: 0; font-size: 20px;">
        <li>Juan David Ospina Arango</li>
    </ul>
    <h2 style="color: #555;">Universidad Nacional de Colombia</h2>
    <img src="imagenes/logo_UNAL.png" alt="logo UNAL" />
</div>

```


# Introducción

En el contexto actual, las empresas de transporte enfrentan desafíos crecientes relacionados con la eficiencia operativa, la seguridad vial y la satisfacción del usuario. Factores como la variabilidad en la demanda, los riesgos asociados a la conducción distractiva y la necesidad de ofrecer experiencias personalizadas exigen soluciones tecnológicas avanzadas. Este proyecto propone el desarrollo de un sistema inteligente integrado basado en técnicas de aprendizaje profundo, con el objetivo de abordar tres problemáticas clave: la predicción de la demanda de transporte mediante series de tiempo, la clasificación automática de comportamientos distractores en conductores a partir de imágenes, y la recomendación personalizada de destinos de viaje para los usuarios. 

# Objetivos

## Objetivo General

Desarrollar un sistema inteligente integrado basado en aprendizaje profundo que permita predecir la demanda de transporte, clasificar comportamientos distractores en conductores a partir de imágenes y generar recomendaciones personalizadas de destinos de viaje, con el fin de optimizar la eficiencia operativa, mejorar la seguridad vial y elevar la experiencia del usuario en una empresa de transporte.

## Objetivos especificos

1. **Desarrollar un modelo de series de tiempo** que utilice datos históricos para predecir la demanda de transporte en rutas específicas durante los próximos 30 días, facilitando una mejor planificación de recursos.
2. **Entrenar un modelo de clasificación de imágenes** para identificar comportamientos distractores en los conductores, como el uso del teléfono móvil o la somnolencia, con el fin de reducir riesgos de accidentes.
3. **Implementar un sistema de recomendación personalizado** que sugiera destinos de viaje a los usuarios, utilizando información del historial de viajes y preferencias individuales.
4. **Diseñar una herramienta web interactiva** que integre los tres módulos desarrollados, permitiendo la visualización de predicciones, la clasificación de imágenes y la generación de recomendaciones de manera accesible para los usuarios y administradores de la empresa.
5. **Documentar el proceso completo de desarrollo** en un informe técnico.

# Punto 1
## Revisión y tratamiento del dataset
Inicialmente se tomó todos los datasets para el desarrollo del trabajo y se combinaron en uno solo para simplificar la revisión de los mismos, ser reviso la existencia de duplicados y valores nulos. Posteriormente se sacó una gráfica inicial para visualizar cuales son los destinos populares, de esto también se encontró que solo hay 5 destinos posibles en la base datos. Aquí la gráfica mencionada 

```{=html}
 <img src="imagenes/DestinosPopulares.png" alt="Gráfica 1: Destinos populares" />
```
Luego se revisó cuantos usuarios en total había, 642 en total y el usuario con más visitas registradas tenía 6 mientras que el segundo y el tercero 5 y 4 respectivamente; para facilitar el trabajo y análisis del dataset se convirtió el dato de 'VisitDate0 a un datetime ya que con este se crearía la serie de tiempo para la realización del primer punto. ADemás, se hizo un timado uniforme para las variables de 'UserID' y 'DestinationId' para tratarlas como strings y así garantizar la consistencia, calidad y eficiencia del modelo, se revisó también el número de viajes por destino en la gráfica 2. Ahora, se hizo la creación de la serie de tiempo agregada agrupando por día y destino, contando el número de viajes y ordenando los datos por fecha.

```{=html}
 <img src="imagenes/NúmeroViajesDestino.png" alt="Gráfica 2: Número de viajes por destino" />
```
De está gráfica podemos ver que el dataset tiene una distribución muy equitativa entre los destinos, pues no hay mucha diferencia entre el número de viajes de cada uno. 

Para crear la serie se filtró el viaje con más destinos para modelar y luego se tomaron los datos de este destino, luego, se creó un rango continuo de fechas de lo cual también se encontró que el dataset solo usaba 3 fechas, con este rango de fechas y los datos del destino top se reindexaron ambos para asegurar la continuidad temporal. Posteriormente, se removieron los valores nulos o vácios y se hizo una revisión de la serie de tiempo. Empezando ahora con la creación del modelo Prophet, se decidió usar este modelo porque la cantidad de datos del dataset era pequeña y además el hecho de que solo tuviese 3 fechas en la serie de tiempo haría que las aproximaciones no fueran tan precisas el modelo prophet es excelente para prototipar y trabajar con pocos datos (1). Se hizó una gráfica inicial para revisar el forecast del modelo para el destino Kerala BackWaters:

```{=html}
 <img src="imagenes/PredicciónProphetKeralaBackWaters.png" alt="Gráfica 3: Predicción de demanda para Kerala Backwaters" />
```
Según la predicción habrá un crecimiento constante en la demanda de viajes con destino a Kerala pero va a tener ciertas variaciones estacionales. Luego de hacer este ejemplo inicial de predicción para una ciudad, se hizo una predicción para las otras 5 ciudades y se unieron todas estas predicciones en un dataset y para visualizar los resultados esto se hizo una gráfica con la proyección para los próximos 30 días de los 5 destinos:

```{=html}
 <img src="imagenes/ProyecciónDemanda30Dias.png" alt="Gráfica 4: Proyección de demanda para los próximos 30 días " />
```
De la gráfica se puede notar que el destino con mayor probabilidad de crecer en demanda en los siguientes 30 días será 'Jaipur City', mientras que los destinos 'Leh Ladakh', 'Taj Mahal' y 'Goa Beaches' tendrán una disminución en su demanda, por último, 'Kerala Backwaters' también tendrá un pequeño crecimiento en la demanda.

Finalmente, pasando a las métricas de evaluación del modelo (RMSE y MAE) se presentan los resultados en la siguiente tabla y gráficas por cada destino:

Kerala Backwaters - RMSE: 3.89 | MAE: 3.65
Taj Mahal - RMSE: 1.81 | MAE: 1.69
Leh Ladakh - RMSE: 0.00 | MAE: 0.00
Goa Beaches - RMSE: 2.68 | MAE: 2.52
Jaipur City - RMSE: 0.00 | MAE: 0.00

```{=html}
 <img src="imagenes/MetricasPorDestino.png" alt="Gráfica 5: Predicción vs Real para cada destino " />
```
De estas gráficas vemos que la predicción se acerca mucho al valor real para dos de los destinos del dataset, mientras que para los otros 3 destinos probablemente sería necesario más datos y fechas para encontrar una predicción más acertada, esto lo podemos confirmar con los valores de la tabla del RMSE y el MAE pues los dos destinos con menores valores de estas métricas son los que tienen mejores predicciones en las gráficas. Por otro lado, el destino con más visitas es el destino con peor ajuste del modelo.

Por último, se almacenaron las predicciones por ciudad y se hizo una gráfica de los componentes para cada ciudad:

```{=html}
 <img src="imagenes/ComponentesGoaBeaches.png" alt="Gráfica 6: Componentes destino Goa Beaches " />
 <img src="imagenes/ComponentesJaipurCity.png" alt="Gráfica 7: Componentes destino Jaipur City" />
 <img src="imagenes/ComponentesKeralaBackwaters.png" alt="Gráfica 8: Componentes destino Kerala Backwaters" />
 <img src="imagenes/ComponentesLehLadakh.png" alt="Gráfica 9: Componentes destino Leh Ladakh" />
 <img src="imagenes/ComponentesTajMahal.png" alt="Gráfica 10: Componentes destino Taj Mahal" />
```
Aunque el dataset tiene un número limitado de fechas, se observan algunos indicios de variaciones diarias que podrían interpretarse como patrones estacionales si tuviéramos más datos. Prophet permite visualizar las componentes de tendencia, estacionalidad y efectos semanales o anuales. En este caso, no se observan componentes significativos por la escasez de datos, pero el modelo está correctamente estructurado para captarlas si se amplía la serie temporal.


#Punto 2


#Punto 3

Se utilizaron técnicas de filtrado colaborativo, recomendación basada en contenido y un enfoque híbrido para mejorar la personalización de las sugerencias de viaje. 
Para este punto se siguió trabajando con el dataset ya procesado y combinando todos los datasets, se hizo un filtrado colaborativo con la matriz user_item_matrix, se normalizó 
las columnas categóricas del dataset y usando TruncatedSVd se redujo la dimensionalidad y se calculó la matriz de similitud entre destinos con el coseno que muestra la similitud entre los destinos según sus características. Se creó un diccionario para traducir identificadores de destino a índices y luego se creó un dataframe con las características de los destinos que se usarán para el filtrado basado en contenido, las características son las siguientes:
PopularityNormalizado: Popularidad del destino (normalizada).
PreferencesList: Lista de preferencias asociadas al destino (por ejemplo, ["playa", "aventura"]).
Type: Tipo de destino (por ejemplo, "playa", "ciudad").
BestTimeToVisit: Mejor momento para visitar (por ejemplo, "verano", "invierno").
con las columnas relevantes y usando un MultiLabelBinarizer se creó un dataframe con "PreferencesList" que está compuesta por columnas binarias que representan las preferencias de cada destino.
Luego se convirtieron las variables categóricas en un formato númerico para incluirlas en el cálculo de similitud basado en contenido, se creó un dataframe unificado que contuviese todas las características númericas de los destinos 
listo para el cálculo de similitud basado en contenido. Posteriormente, se aseguró que todas las columnas sean compatibles con cálculos númericos posteriores y se hizó un cálculo de similitud basado en contenido.

Continuando, se creó la función para hacer la recomendación de destinos para usuarios en el dataset, la función "recommend_destinations" recibe 3 parámetros:
1. El id del usuario.
2. El número de destinos a recomendar (por defecto 5)
3. El peso para combinar los puntajes de filtrado colaborativo y basado en contenido (por defecto 0.5, lo que da igual importancia a ambos).
La función recommend_destinations genera recomendaciones personalizadas para un usuario combinando:

Filtrado colaborativo: Usa la matriz de similitud destination_similarity (basada en interacciones de usuarios) para puntuar destinos según su similitud con los destinos visitados.
Filtrado basado en contenido: Usa la matriz de similitud user_similarity (basada en características de los destinos) para puntuar destinos según su similitud con los destinos visitados.
Enfoque híbrido: Combina ambos puntajes usando el parámetro alpha para equilibrar la importancia de cada enfoque.
Postprocesamiento: Excluye destinos ya visitados, agrega nombres legibles, promedia puntajes si es necesario, y selecciona los top_n destinos con mayor puntaje.

Ahora, se creó la función para recomendar por perfil, esta solo recibe el perfil del usuario, como por ejemplo:
user_profile = {
    "Preferences": "Nature, Adventure",
    "Gender": "Female",
    "NumberOfAdults": 2,
    "NumberOfChildren": 1
}
La función recommend_by_profile genera recomendaciones basadas en un perfil de usuario que especifica preferencias (por ejemplo, "playa, aventura"). Funciona así:

Construye un vector de usuario:
Codifica las preferencias del usuario como un vector binario (pref_vec).
Usa valores por defecto (ceros) para el tipo de destino y el mejor momento para visitar.
Asigna la popularidad promedio para PopularityNormalizado.
Calcula similitud: Compara el vector del usuario con los vectores de los destinos usando la similitud del coseno.
Selecciona los mejores: Ordena los destinos por similitud y devuelve los top_n más relevantes.
Posibles mejoras:
No utiliza información sobre el tipo de destino (Type) ni el mejor momento para visitar (BestTimeToVisit) del perfil del usuario, ya que type_vec y time_vec se inicializan en ceros. Esto podría mejorarse si el user_profile incluyera estas preferencias.
La popularidad se establece como el promedio, lo que podría no reflejar las preferencias reales del usuario.

Por último, se hizo el cálculo de las métricas de las recomendaciones generando 50 usuarios con perfiles al azar y se llegó a estos resultados:
=== Métricas de evaluación global (promedio sobre perfiles aleatorios) ===
Precision promedio global: 0.279
Recall promedio global: 0.655





#Referencias 
  1. Taylor SJ, Letham B. 2017. Forecasting at scale. PeerJ Preprints 5:e3190v2 https://doi.org/10.7287/peerj.preprints.3190v2
